Rapport NSI : https://docs.google.com/document/d/1gvzL3_WS1plv9fyCYF5iZ704DGyA8zfZT790ArBPsEk/edit?usp=sharing

Introduction
Plongez dans un rogue-like spatial où vous prenez les commandes d’un vaisseau évolutif, affrontant des vagues d’ennemis et des boss redoutables à la difficulté croissante. Inspiré par Nova Drift et Bounty of One, ce jeu met l’accent sur une progression dynamique et stratégique, où chaque partie est unique. Développez votre vaisseau grâce à des améliorations, surmontez des défis toujours plus exigeants et testez vos réflexes dans un univers galactique en perpétuel danger.

Présentation de notre code :



Fichier main : (fait par Martin)

pygame.init()
 Initialise tous les modules nécessaires de Pygame.
 Doit être appelé avant toute utilisation de ses fonctionnalités.


window = pygame.display.set_mode((0, 0), pygame.FULLSCREEN)
 Crée une fenêtre en plein écran avec la résolution de l'écran courant.


WIDTH, HEIGHT = window.get_size()
 Récupère les dimensions de l’écran pour les utiliser dans le jeu.


pygame.display.set_caption("Stardust Odyssey")
 Définit le nom affiché dans la barre de titre (visible si la fenêtre n'est pas en plein écran).


Shop().run(window)
 Instancie la classe Shop et lance sa méthode run.
 Cette ligne démarre la boucle de jeu principale avec la fenêtre en paramètre.



Fichier Game Loop : (fait par François et Martin) :

Fonction game_loop(...)
Fonction principale de la boucle de jeu.
 Gère l’état du joueur, les vagues ennemies, le multijoueur et le score.

Fonctions imbriquées dans game_loop :
receive_data_thread(p2p_conn, queue)
 Thread qui écoute les données réseau entrantes.
 Met en file les messages pour un traitement dans la boucle principale.



Fonctions globales (hors classe) :
update_bullets(ship, enemies, damage_manager=None)
 Met à jour le déplacement et les collisions des balles d’un vaisseau.
 Gère explosions, rebonds, piercings et suppression des balles.


show_game_over(score)
 Affiche l’écran de fin de partie avec le score et les crédits gagnés.
 Attend une entrée utilisateur pour revenir au menu.


create_enemy_from_data(enemy_data)
 Crée un ennemi à partir d’un dictionnaire reçu en réseau.
 Affecte dynamiquement les attributs nécessaires selon le type.


draw_game_info(window, font, score, player, wave_number, wave_text_timer, player2=None)
 Affiche à l’écran le score, le numéro de vague et les barres de vie.
 Gère aussi l’affichage du texte de vague en cours.

Class Shop
Gère l’écran du menu, la boutique et les interactions réseau pour le multijoueur.
 Permet la sélection de skin, l’achat avec crédits et le lancement du jeu.
__init__(self)
 Initialise tous les éléments de la boutique : boutons, musique, vidéos, skins.
 Configure la grille d’affichage et charge les données sauvegardées.


draw_skin_preview(self, surface, skin, x, y)
 Affiche un aperçu visuel d’un skin dans une carte personnalisée.
 Affiche aussi le nom, la description et le bouton de sélection ou d’achat.


handle_skin_selection(self, skin)
 Gère l’achat ou la sélection d’un skin, si les crédits le permettent.
 Sauvegarde la sélection et les crédits mis à jour.


draw_shop_screen(self, surface)
 Affiche l’écran complet de la boutique, y compris tous les skins sous forme de grille.


run(self, screen)
 Boucle principale de gestion des écrans du menu.
 Gère tous les états : menu principal, boutique, multijoueur, IP, etc.
 Affiche les vidéos d’arrière-plan et les boutons selon le contexte.



Fichier Player : (fait par François)

Class Ship
Classe représentant le vaisseau du joueur, avec des propriétés de mouvement, de tir, de santé et de capacités spéciales.
 Gère également les interactions avec l’environnement et les ennemis, y compris les téléportations et les effets visuels.
 Peut être personnalisé avec différents skins via une fonction externe.
__init__
 Initialise le vaisseau avec ses statistiques (santé, vitesse, dégâts, etc.) et son apparence.
 Prépare également les effets spéciaux comme les tirs critiques ou les capacités temporaires.


move
 Gère les déplacements du vaisseau selon les touches pressées et simule l'inertie.
 Implémente un système de téléportation aux bords de l'écran qui inflige des dégâts.


rotate_to_mouse
 Oriente le vaisseau vers la position de la souris pour un contrôle intuitif de la direction.
 Met à jour l’image affichée en fonction de l’angle calculé.


shoot
 Tire un ou plusieurs projectiles en fonction des capacités du joueur.
 Gère les coups critiques et les effets sonores associés aux tirs.


update
 Met à jour l’état du vaisseau à chaque frame : santé, cooldowns, balles, etc.
 Gère les capacités spéciales comme l’invulnérabilité ou le champ de force.


draw
 Affiche le vaisseau et ses effets visuels (champ de force, invincibilité).
 Gère l’affichage conditionnel en fonction des états actifs.


class Bullet
Classe représentant les projectiles tirés par le joueur.
 Gère leur déplacement, les collisions, les rebonds et les effets visuels.
 Peut infliger des dégâts critiques et provoquer des explosions de zone.
__init__
 Initialise un projectile avec ses propriétés dérivées du vaisseau qui l’a tiré.
 Charge l’image, configure les dégâts et prépare les effets d’explosion.


move
 Déplace la balle selon son angle et sa vitesse.
 Met à jour la distance totale parcourue.


draw
 Affiche la balle avec une rotation correspondant à sa direction de déplacement.
 Utilise une image préchargée adaptée à sa taille.


explode
 Gère l’explosion de la balle et inflige des dégâts de zone aux ennemis à proximité.
 Affiche un effet visuel circulaire temporaire.


bounce_off_wall
 Fait rebondir la balle sur les murs et ajuste son angle de rebond.
 Diminue le compteur de rebonds disponibles.


bounce_off_enemy
 Fait rebondir la balle sur un ennemi en recalculant sa direction.
 Ajuste sa position pour éviter une collision immédiate après le rebond.


Fichier damage_numbers (Zima) :

Class DamageNumber
Représente un nombre de dégâts affiché à l'écran.
 Contient la position, la valeur des dégâts et les effets visuels (couleur, mouvement).
 S'affiche temporairement avec un effet de montée.
__init__(self, x, y, damage, is_critical=False)
 Initialise la position, les dégâts, la couleur et la durée d’affichage.
 Utilise une couleur différente si c’est un coup critique.


update(self)
 Fait monter le texte et réduit le temps d’affichage.
 Retourne True si le nombre doit rester affiché, sinon False.


draw(self, window)
 Affiche le texte à l’écran centré horizontalement.
 La couleur dépend du type de dégât (critique ou normal).


Class DamageNumberManager
Gère tous les nombres de dégâts affichés à l’écran.
 Stocke et met à jour une liste de DamageNumber.
 Responsable de leur affichage et de leur suppression quand expirés.
__init__(self)
 Initialise une liste vide pour stocker les DamageNumbers actifs.


add_damage_number(self, x, y, damage, is_critical=False)
 Crée et ajoute un nouveau nombre de dégâts à afficher.
 Permet d’indiquer s’il s’agit d’un coup critique.


update(self)
 Met à jour tous les nombres affichés et enlève ceux expirés.
 Filtre la liste pour ne garder que ceux encore visibles.


draw(self, window)
 Affiche tous les nombres de dégâts présents dans la liste.
 Appelle la méthode draw() de chaque DamageNumber.


Fichier Upgrades (Martin et Zima):

all_upgrades (liste de dictionnaires)
Contient toutes les améliorations disponibles dans le jeu, chacune définie par un identifiant, un effet, une image et une fonction d’application.
 Chaque amélioration possède un niveau actuel et un niveau maximum.
 L’attribut apply est une fonction lambda qui modifie les attributs du joueur.
Exemples d'améliorations :


"Health Up" : Augmente la santé maximale de +20.


"Critical chance" : Augmente les chances de coup critique de +5%.


"Explosion" : Ajoute un rayon d'explosion aux tirs.


"Light speed ability" : Débloque la compétence "vitesse lumière" avec la touche [1].


def shop_upgrades(player, p2p=None, player2=None, network_queue=None)
Affiche l’interface de sélection d’amélioration après une vague.
 Fonctionne en mode solo ou multijoueur (client/serveur), avec synchronisation réseau.
 Applique l’amélioration sélectionnée au joueur et met à jour son niveau.
Phase client (non-hôte)


Affiche un message d'attente pendant que l'hôte sélectionne une amélioration.


Écoute les messages réseau et applique l'amélioration choisie côté client.


Phase serveur ou solo


Filtre les améliorations encore disponibles (pas au niveau max).


Affiche trois améliorations aléatoires dans une interface graphique.


Applique l'amélioration choisie au joueur 1 (et aussi au joueur 2 si défini).


Met à jour le niveau de l’amélioration choisie dans la liste globale.


Envoie la sélection au client dans le cas du mode multijoueur serveur.


Fichier spawnwave (Zima):

spawn_wave(wave_number, play_music=True)
Gère l’apparition des ennemis selon le numéro de vague, avec une logique de cycle croissant.
Détermine les types d’ennemis (normaux ou boss) à faire apparaître.
Joue des musiques spécifiques pour les vagues normales ou de boss si demandé.


Fichier Multijoueur (fait par François et Martin):

Class P2PCommunication

__init__
Initialise la communication avec les paramètres réseau, la configuration locale, les buffers, et les délais.
obtenir_adresse_ip_locale
Tente d’obtenir l’adresse IP locale en se connectant à un serveur externe (Google DNS).
Utilise une socket UDP temporaire pour cette opération.
initialiser
Lance l'initialisation en tant que serveur ou client selon le paramètre est_serveur.
Échange aussi les infos de skin après connexion établie.
initialiser_serveur
Démarre un serveur TCP qui écoute une connexion entrante.
Affiche les infos de connexion pour permettre au client de se connecter.
initialiser_client
Connecte le client au serveur TCP distant.
Retourne True si la connexion réussit, sinon affiche l’erreur.
exchange_skin_info
Envoie les informations du skin local, puis attend et reçoit celles du pair distant.
Utilise un format JSON et un séparateur de message pour la communication.
envoyer_donnees
Envoie un dictionnaire sous forme JSON à l’autre joueur.
Gère l'intervalle d’envoi pour les messages d'état afin de limiter le trafic.
recevoir_donnees
Lit les messages entrants dans le buffer réseau et les décode en JSON.
Retourne une liste de messages valides ou None en cas d'erreur ou de déconnexion.
démarrer_communication
Lance un thread en arrière-plan pour lire en continu les messages entrants.
_recevoir_boucle
Boucle de réception exécutée en thread, vérifie les nouveaux messages à intervalles réguliers.
fermer
Ferme proprement la connexion et le socket serveur s’ils sont ouverts.
Évite les tentatives de fermeture multiples.

Class GameState
__init__
Initialise les données du jeu comme les joueurs, projectiles, ennemis et le timing de synchronisation.
update_from_network
Met à jour l’état local avec les données reçues du réseau (positions, tirs, ennemis, vague).
Ne synchronise que si le délai depuis la dernière mise à jour dépasse un seuil.
Le serveur a l'autorité sur la mise à jour des ennemis.

Fichier data (François)
Couleur définie
BLUE = (0, 0, 255)
Couleur utilisée comme attribut couleur_vaisseau dans les skins.
Fonction: save_data(credits, selected_skin, skins)
Sauvegarde les données du joueur dans un fichier JSON.
Enregistre les crédits, le skin sélectionné et la liste des skins.
Écrit dans un fichier local : "save_data.json".

Fonction: load_data()
Charge les données du joueur depuis un fichier JSON.
Si le fichier est absent ou corrompu, des valeurs par défaut sont recréées.
Fonctionnement détaillé :
Vérifie si le fichier "save_data.json" existe :

-	Tente de charger les données :
Corrige les couleurs des skins si elles ont été lues comme des listes.
Si la lecture échoue (fichier corrompu), recrée le fichier avec les données par défaut.

- 	Sinon, crée un fichier avec :
5000 crédits.
Skin de base nommé "Basic Ship" (gratuit, débloqué, couleur bleue).
Retourne les données par défaut.
-	En cas d'erreur imprévue (ex: permissions), affiche l’erreur et renvoie les valeurs par défaut.

Chaque skin suit ce format :
{
  "name": "Nom du skin",
  "price": "prix ou gratuit",
  "unlocked": True/False,
  "couleur_vaisseau": (R, G, B)
}

Fichier boutons (Zima):

 Class Button
Crée un bouton interactif à cliquer, avec texte centré.
Utilise des couleurs différentes pour l’état normal et survolé.
__init__(x, y, width, height, text)
Initialise la position, les dimensions et le texte du bouton.
Déclare les états (is_hovered, was_clicked) et les couleurs.
Définit une police pour le texte.
draw(surface)
Dessine le contour du bouton avec couleur dépendante du survol.
Centre et affiche le texte à l'intérieur du bouton.
handle_event(event)
Détecte si la souris survole ou clique le bouton.
Change l'état interne en cas de clic gauche sur la zone du bouton.
Retourne True si le bouton est cliqué.
reset()
Réinitialise l’état de clic (was_clicked = False).
Utile pour éviter les clics multiples sur une même action.

Class InputBox
Zone de saisie de texte cliquable avec gestion clavier.
Permet de taper du texte via la souris et le clavier.
__init__(x, y, width, height, text='')
Crée une boîte rectangulaire avec texte par défaut.
Initialise la couleur, l’état d’activation (active) et le rendu du texte.
handle_event(event)
Active ou désactive la boîte quand l’utilisateur clique dessus.
Gère la saisie clavier si la boîte est active :
Ajout de texte ou suppression avec BACKSPACE.
Met à jour le rendu texte après chaque modification.
draw(screen)
Dessine le fond noir de la boîte.
Affiche le texte avec un léger décalage intérieur.
Dessine un contour coloré (blanc ou bleu si active).
Couleurs globales utilisées
WHITE, BLACK, RED, YELLOW, GREEN, BLUE
Définies pour un accès simplifié aux couleurs standard dans l’interface.

Fichier enemies (Martin, (François)):
Class Enemy
__init__()
 Initialise la position de l’ennemi hors écran, ses attributs (vie, dégâts, image, etc.).
 Choisit un bord aléatoire pour l’apparition.


is_on_screen()
 Vérifie si l’ennemi est à l’intérieur de l’écran avec une marge.
 Retourne True ou False.


draw(window)
 Dessine l’ennemi, les dégâts affichés et éventuellement la barre de vie du boss.
 Centre l’image et les éléments visuels à sa position.


show_damage(damage, is_critical)
 Ajoute une animation de nombre flottant pour les dégâts subis.
 Affiche une couleur différente pour les coups critiques.


check_collision(player)
 Vérifie la collision avec le joueur selon la distance.
 Applique les dégâts et l’invincibilité si collision. Gère le multijoueur.


update(player)
 Méthode vide à surcharger.
 Sert de base pour définir un comportement personnalisé.


move_towards(player)
 Méthode vide à surcharger.
 Prévue pour le déplacement vers le joueur.
            Class BasicEnemy (hérite de Enemy)
 Définit un ennemi simple avec peu de vie et une vitesse modérée.
 Charge une image personnalisée rouge.
Class TankEnemy
 Crée un ennemi lent et robuste avec une grande taille.
 Charge une image jaune avec traitement d’erreur si besoin..
Class ShooterEnemy
 Ennemi mobile avec tirs vers le joueur à intervalles.
 Se déplace entre des positions aléatoires, avec projectiles verts.


Class LinkEnemy
 Ennemi spécial pouvant se lier à d’autres via des lasers.
 Possède une grande portée de détection.
Class Tank_Boss
Boss massif qui tire en rafale ou en cercle.
 Positionné au centre de l’écran avec beaucoup de vie.


Class Dash_Boss
 Boss rapide qui effectue des charges ou tire des projectiles de stun.
 Agit selon un système de probabilité et de timer.


Class Laser_Boss
 Boss qui tire des projectiles lasers.
 Peut faire rebondir les projectiles sur les bords de l’écran.


Class: Mothership_Boss
 Boss final avec beaucoup de santé et plusieurs phases.
 Tire selon la phase et peut invoquer des sbires.
Problèmes principaux rencontrés :


1. Shooter enemy – Ennemi censé tirer
Problèmes rencontrés :
Ennemi qui tirait une seule fois  ⇒ changement de la logique de tir, avec cooldown

Problèmes liés aux phases déplacements et d’attaque (les 2 se faisaient en même temps)
2. Link Enemy – Laser entre deux ennemis
Problèmes rencontrés :
Le laser ne s’affichait pas ou s’affichait avec un décalage, car les deux ennemis n’étaient pas initialisés ou rendus en même temps
.
Les coordonnées des ennemis n’étaient pas synchronisées correctement pour tracer un segment précis entre eux.

Collision du laser avec le joueur imprécise ou non détectée, souvent dû à un calcul de distance mal ajusté.

Laser qui s'étendait à l’infini au-delà des ennemis.

3. Multijoueur – Synchronisation des actions
Problèmes rencontrés :
Les mouvements du joueur distant n’étaient pas fluides : décalage important dû à l’envoi trop peu fréquent des positions.

Les tirs n’étaient pas visibles pour l’autre joueur ou étaient mal positionnés.
L’apparence (skin, orientation) n’était pas correctement partagée entre les clients.

 Le joueur distant apparaissait figé ou se déplaçait par à-coups à cause d’une fréquence d’actualisation trop faible ou non interpolée.

 Les tirs étaient souvent déclenchés uniquement localement, sans réplication réseau.


 L’autre joueur n’avait pas toujours le bon skin ou l’orientation correcte de son vaisseau.

Pendant que l’hôte choisissait une amélioration, l’autre joueur restait bloqué sans indication visuelle claire.

 Il n’y avait pas de synchronisation entre la fin du menu de choix de l’hôte et l’arrêt de l’écran d’attente du client.
 Cela causait une confusion sur l’état du jeu (le joueur pensait que le jeu était figé).


4. Gestion des fichiers – Chargement et structuration
Problèmes rencontrés :
Nous avons rencontré des difficultés lors de la séparation de notre code en plusieurs fichiers. Certaines fonctions dépendent mutuellement de l’un et l’autre fichier, ce qui provoque des appels circulaires indésirables. Pour simplifier la structure et éviter ces problèmes, nous avons finalement regroupé l’ensemble du code dans un seul fichier.

Problèmes d’importation circulaire (game loop>shop>game loop…) ⇒ les 2 dans le même fichier

5. Fonctionnement des boutons
Problèmes rencontrés :
Lorsqu’on clique sur le bouton "back" depuis l’écran du shop, l’application revient correctement au menu principal, mais retourne aussitôt, sans action de l’utilisateur, sur l’écran du shop. Ce comportement se répète en boucle, sans clic ni mouvement de souris, comme si l’action initiale était relancée en continu.
Pour corriger le bug de boucle entre les écrans, une variable input_cooldown a été utilisée afin d’ignorer temporairement les clics de souris pendant quelques frames juste après un changement d’écran, empêchant ainsi la réutilisation du même événement de clic sur le nouvel écran.

La position des boutons ne se mettait pas correctement avec l’image. Donc nous avons été obligé de repositionner les boutons



